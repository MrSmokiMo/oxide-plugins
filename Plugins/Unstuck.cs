/*
TODO:
- Add input listening or multiple buttons for directional control?
- Update configuration to have usable defaults
- Update configuration automatically
*/

using UnityEngine;
using Oxide.Core;
using Oxide.Game.Rust.Cui;

namespace Oxide.Plugins
{
    [Info("Unstuck", "Wulf/lukespragg", "0.1.0", ResourceId = 0)]
    [Description("Enables players to get easily get unstuck from places.")]

    class Unstuck : RustPlugin
    {
        // Do NOT edit this file, instead edit Unstuck.json in server/<identity>/oxide/config

        #region Configuration

        bool CanBuildCheck => Config.Get<bool>("CanBuildCheck");
        string Cooldown => Config.Get<string>("Cooldown");
        int CooldownSeconds => Config.Get<int>("CooldownSeconds");
        bool GuiButton => Config.Get<bool>("GuiButton");
        string NoPermission => Config.Get<string>("NoPermission");
        bool UsePermissions => Config.Get<bool>("UsePermissions");

        protected override void LoadDefaultConfig()
        {
            Config["CanBuildCheck"] = true;
            Config["Cooldown"] = "Please wait a bit before using 'unstuck'";
            Config["CooldownSeconds"] = 10;
            Config["GuiButton"] = true;
            Config["NoPermission"] = "Sorry, you can't use 'unstuck' right now";
            Config["UsePermissions"] = true;
        }

        #endregion

        #region General Setup

        void Loaded()
        {
            permission.RegisterPermission("unstuck.allowed", this);

            if (GuiButton) foreach (var player in BasePlayer.activePlayerList) UnstuckButton(player, null);
        }

        void OnPlayerSleepEnded(BasePlayer player) => UnstuckButton(player, null);

        #endregion

        #region Player Info

        class OnlinePlayer
        {
            public BasePlayer Player;
            public float LastUnstuckTime;
        }

        [OnlinePlayers] Hash<BasePlayer, OnlinePlayer> onlinePlayers = new Hash<BasePlayer, OnlinePlayer>();

        #endregion

        #region Chat Command

        [ChatCommand("unstuck")]
        void UnstuckChat(BasePlayer player)
        {
            if (UsePermissions && !HasPermission(player, "unstuck.allowed") || CanBuildCheck && !player.CanBuild())
            {
                SendReply(player, NoPermission);
                return;
            }

            if (CooldownSeconds != 0 && onlinePlayers[player].LastUnstuckTime + CooldownSeconds > Interface.Oxide.Now)
            {
                SendReply(player, Cooldown);
                return;
            }

            onlinePlayers[player].LastUnstuckTime = Interface.Oxide.Now;
            var countdown = CooldownSeconds;
            timer.Repeat(1f, CooldownSeconds, () =>
            {
                countdown = countdown - 1;
                UnstuckButton(player, countdown.ToString());
                if (countdown == 0) timer.Once(1f, () => { UnstuckButton(player, null); });
            });

            var pos = player.transform.position;
            rust.ForcePlayerPosition(player, pos.x + 2, pos.y, pos.z);
        }

        #endregion

        #region Console Command

        [ConsoleCommand("global.unstuck")]
        void UnstuckConsole(ConsoleSystem.Arg arg)
        {
            var player = BasePlayer.Find(arg.GetString(0));
            if (player) UnstuckChat(player);
        }

        #endregion

        #region GUI Button

        string button;

        void UnstuckButton(BasePlayer player, string text)
        {
            var elements = new CuiElementContainer();
            button = elements.Add(new CuiButton
            {
                Button = { Command = $"unstuck {player.userID}", Color = "0.8 0.8 0.8 0.2" },
                RectTransform = { AnchorMin = "0.026 0.037",  AnchorMax = "0.075 0.10" },
                Text = { Text = (text ?? "U"), FontSize = 20, Align = TextAnchor.MiddleCenter }
            }, "HUD/Overlay", "unstuck");
            CuiHelper.DestroyUi(player, button);
            CuiHelper.AddUi(player, elements);
        }

        #endregion

        #region Cleanup

        void Unload()
        {
            if (GuiButton) foreach (var player in BasePlayer.activePlayerList) CuiHelper.DestroyUi(player, button);
        }

        #endregion

        #region Helper Methods

        bool HasPermission(BasePlayer player, string perm) => permission.UserHasPermission(player.UserIDString, perm);

        #endregion
    }
}
