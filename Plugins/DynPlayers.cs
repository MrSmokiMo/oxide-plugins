using System;
using System.Collections.Generic;
using Steamworks;

namespace Oxide.Plugins
{
    [Info("DynPlayers", "Wulf/lukespragg", "0.4.0")]
    [Description("Dynamically controls the player count based on the server's FPS.")]

    class DynPlayers : HurtworldPlugin
    {
        // Do NOT edit this file, instead edit DynPlayers.json in oxide/config and DynPlayers.en.json in oxide/lang,
        // or create a language file for another language using the 'en' file as a default.

        #region Localization

        void LoadDefaultMessages()
        {
            var messages = new Dictionary<string, string>();
            //messages.Add("", "");
            lang.RegisterMessages(messages, this);
        }

        #endregion

        #region Configuration

        bool DynamicPlayerLimit => GetConfig("DynamicPlayerLimit", true);
        bool KickForPerformance => GetConfig("KickForPerformance", true);
        bool KickIdlePlayers => GetConfig("KickIdlePlayers", true);
        bool KickNewPlayers => GetConfig("KickNewPlayers", true);

        protected override void LoadDefaultConfig()
        {
            Config["DynamicPlayerLimit"] = DynamicPlayerLimit;
            Config["KickForPerformance"] = KickForPerformance;
            Config["KickIdlePlayers"] = KickIdlePlayers;
            Config["KickNewPlayers"] = KickNewPlayers;
            SaveConfig();
        }

        #endregion

        #region Initialization

        const int maxLimit = 60; // DO NOT EDIT THIS
        int maxPlayers = maxLimit;

        void Init()
        {
            LoadDefaultConfig();
            LoadDefaultMessages();

            GameManager.Instance.ServerConfig.MaxPlayers = maxLimit;

            timer.Repeat(5f, 0, () =>
            {
                var currentLimit = GameManager.Instance.ServerConfig.MaxPlayers;

                if (DumpFPS.Instance.GetFPS() < 80f && currentLimit >= maxLimit)
                {
                    PrintWarning($"FPS drop detected! Lowered to {maxLimit}");
                    GameManager.Instance.ServerConfig.MaxPlayers = maxLimit;
                }

                if (DumpFPS.Instance.GetFPS() >= 80f && currentLimit != maxPlayers)
                {
                    PrintWarning($"FPS back to normal! Restored to {maxPlayers}");
                    GameManager.Instance.ServerConfig.MaxPlayers = maxPlayers;
                }
            });
        }

        #endregion

        #region Command Handling

        object OnServerCommand(string command)
        {
            var args = command.Trim().ToLower().Split(' ');

            if (!args[0].Equals("maxplayers") || !int.TryParse(args[1], out maxPlayers)) return null;

            maxPlayers = Math.Min(60, (maxPlayers == 0 ? 1 : maxPlayers));
            GameManager.Instance.ServerConfig.MaxPlayers = maxPlayers;
            if (SteamworksManagerClient.Instance.InitializedServer) SteamGameServer.SetMaxPlayerCount(maxPlayers);
            return true;
        }

        #endregion

        #region Helper Methods

        T GetConfig<T>(string name, T defaultValue)
        {
            if (Config[name] == null) return defaultValue;
            return (T)Convert.ChangeType(Config[name], typeof(T));
        }

        string GetMessage(string key, string steamId = null) => lang.GetMessage(key, this, steamId);

        #endregion
    }
}
