using System;

namespace Oxide.Plugins
{
    [Info("SleeperGuard", "Wulf/lukespragg", 0.1, ResourceId = 1454)]
    [Description("Protects sleeping players from being killed and looted.")]

    class SleeperGuard : CovalencePlugin
    {
        // Do NOT edit this file, instead edit SleeperGuard.json in server/<identity>/oxide/config

        #region Configuration
        
        bool GlobalProtection => GetConfig("GlobalProtection", true);

        protected override void LoadDefaultConfig()
        {
            Config["GlobalProtection"] = GlobalProtection;
            SaveConfig();
        }

        #endregion

        #region Initialization

        void Loaded()
        {
            #if !RUST
            throw new NotSupportedException("This plugin does not support this game");
            #endif

            LoadDefaultConfig();
            permission.RegisterPermission("sleeperguard.damage", this);
            permission.RegisterPermission("sleeperguard.loot", this);
        }

        #endregion

        #region Damage Blocking

        #if RUST
        object OnEntityTakeDamage(BaseCombatEntity entity)
        {
            var target = entity as BasePlayer;
            if (target == null || !target.IsSleeping()) return null;
            if (GlobalProtection || HasPermission(target.UserIDString, "sleeperguard.damage")) return true;
            return null;
        }
        #endif

        #endregion

        #region Loot Blocking

        #if RUST
        bool CanLootPlayer(BasePlayer target)
        {
            return !target.IsSleeping() || (!GlobalProtection && !HasPermission(target.UserIDString, "sleeperguard.loot"));
        }
        #endif

        #endregion

        #region Helper Methods

        T GetConfig<T>(string name, T defaultValue)
        {
            if (Config[name] == null) return defaultValue;
            return (T)Convert.ChangeType(Config[name], typeof(T));
        }

        bool HasPermission(string userId, string perm) => permission.UserHasPermission(userId, perm);

        #endregion
    }
}
