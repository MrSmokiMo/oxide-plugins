/*
TODO:
- Add no permission message for chat command
- Allow localization of item names
*/

using System;
using System.Collections.Generic;
using Oxide.Core;
using Oxide.Core.Configuration;
using Oxide.Core.Libraries.Covalence;

namespace Oxide.Plugins
{
    [Info("MasterKey", "Wulf/lukespragg", "0.5.0", ResourceId = 1151)]
    [Description("Gain access to any locked object with permissions.")]

    class MasterKey : CovalencePlugin
    {
        // Do NOT edit this file, instead edit MasterKey.json in oxide/config and MasterKey.en.json in oxide/lang,
        // or create a language file for another language using the 'en' file as a default.

        #region Initialization

        readonly string[] types = { "box", "cell", "door", "gate", "shopfront", "floor" };
        readonly DynamicConfigFile dataFile = Interface.Oxide.DataFileSystem.GetFile("MasterKey");
        Dictionary<string, bool> playerPrefs = new Dictionary<string, bool>();

        void Init()
        {
            LoadDefaultConfig();
            LoadDefaultMessages();
            playerPrefs = dataFile.ReadObject<Dictionary<string, bool>>();

            foreach (var type in types) permission.RegisterPermission($"{Title.ToLower()}.{type}", this);
        }

        #endregion

        #region Configuration

        bool logUsage;
        bool showMessages;

        protected override void LoadDefaultConfig()
        {
            Config["LogUsage"] = logUsage = GetConfig("LogUsage", true);
            Config["ShowMessages"] = showMessages = GetConfig("ShowMessages", true);
            SaveConfig();
        }

        #endregion

        #region Localization

        void LoadDefaultMessages()
        {
            lang.RegisterMessages(new Dictionary<string, string>
            {
                ["Disabled"] = "Master key access is now disabled",
                ["Enabled"] = "Master key access is now enabled",
                ["MasterKeyUsed"] = "{0} ({1}) used master key at {2}",
                ["UnlockedWith"] = "Unlocked {0} with master key!"
            }, this);
        }

        #endregion

        #region Chat Command

        [Command("masterkey", "mkey", "mk")]
        void ChatCommand(IPlayer player, string command, string[] args)
        {
            if (!IsAllowed(player.Id, "masterkey.*"))
            {
                // TODO: No perm message
                return;
            }

            if (!playerPrefs.ContainsKey(player.Id)) playerPrefs.Add(player.Id, true);
            playerPrefs[player.Id] = !playerPrefs[player.Id];
            dataFile.WriteObject(playerPrefs);

            player.Reply(playerPrefs[player.Id] ? Lang("Enabled", player.Id) : Lang("Disabled"));
        }

        #endregion

        #region Lock Access

        #if RUST
        object CanUseDoor(BasePlayer player, BaseLock door)
        {
            var prefab = door.parentEntity.Get(true).ShortPrefabName;

            if (!door.IsLocked()) return true;
            if (playerPrefs.ContainsKey(player.UserIDString) && !playerPrefs[player.UserIDString]) return null;

            foreach (var type in types)
            {
                if (!type.Contains(prefab)) continue;

                if (!IsAllowed(player.UserIDString, "masterkey.all") && !IsAllowed(player.UserIDString, $"masterkey.{type}")) return null;
                if (showMessages) player.ChatMessage(Lang("UnlockedWith", player.UserIDString, type));
                if (logUsage) LogToFile(Lang("MasterKeyUsed", null, player.displayName, player.UserIDString, player.transform.position));
                return true;
            }

            return null;
        }
        #endif

        #endregion

        #region Cupboard Access

        #if RUST
        void OnEntityEnter(TriggerBase trigger, BaseEntity entity)
        {
            var player = entity as BasePlayer;
            if (player == null || !(trigger is BuildPrivilegeTrigger)) return;

            if (playerPrefs.ContainsKey(player.UserIDString) && !playerPrefs[player.UserIDString]) return;
            if (!IsAllowed(player.UserIDString, "masterkey.*") && !IsAllowed(player.UserIDString, "masterkey.cupboards")) return;

            timer.Once(0.1f, () => player.SetPlayerFlag(BasePlayer.PlayerFlags.HasBuildingPrivilege, true));
            if (showMessages) player.ChatMessage(Lang("UnlockedWith", player.UserIDString, "cupboard"));
            if (logUsage) LogToFile(Lang("MasterKeyUsed", null, player.displayName, player.UserIDString, player.transform.position));
        }
        #endif

        #endregion

        #region Helpers

        T GetConfig<T>(string name, T value) => Config[name] == null ? value : (T)Convert.ChangeType(Config[name], typeof(T));

        string Lang(string key, string id = null, params object[] args) => string.Format(lang.GetMessage(key, this, id), args);

        void LogToFile(string text) => ConVar.Server.Log($"oxide/logs/{Title.ToLower()}_{DateTime.Now.ToString("yyyy-M-d")}.txt", text);

        bool IsAllowed(string userId, string perm) => permission.UserHasPermission(userId, perm);

        #endregion
    }
}
