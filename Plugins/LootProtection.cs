using System;
using System.Collections.Generic;

namespace Oxide.Plugins
{
    [Info("LootProtection", "Wulf/lukespragg", "1.0.0")]
    [Description("Prevents players with permission from being looted by other players.")]

    class LootProtection : CovalencePlugin
    {
        // Do NOT edit this file, instead edit LootProtection.en.json in oxide/lang,
        // or create a language file for another language using the 'en' file as a default.

        #region Localization

        void LoadDefaultMessages()
        {
            var messages = new Dictionary<string, string>
            {
                {"PlayerProtected", "{0} is protected from looting"}
            };
            lang.RegisterMessages(messages, this);
        }

        #endregion

        #region Initialization

        void Loaded()
        {
            #if !RUST
            throw new NotSupportedException("This plugin does not support this game");
            #endif

            LoadDefaultConfig();
            LoadDefaultMessages();
            permission.RegisterPermission("lootprotection.enabled", this);
            permission.RegisterPermission("lootprotection.bypass", this);
        }

        #endregion

        #region Loot Protection

        #if RUST
        /*object CanLootPlayer(BasePlayer target, BasePlayer looter)
        {
            if (HasPermission(looter.UserIDString, "lootprotection.bypass")) return true;
            if (HasPermission(target.UserIDString, "lootprotection.enabled")) return false;

            return null;
        }*/

        void OnLootPlayer(BasePlayer player, BasePlayer target)
        {
            if (HasPermission(player.UserIDString, "lootprotection.bypass"))
            {
                Puts("Protection bypassed!");
                return;
            }
            if (HasPermission(target.UserIDString, "lootprotection.enabled"))
            {
                Puts("Protected!");
            }
        }
        #endif

        #endregion

        #region Helper Methods

        string GetMessage(string key, string steamId = null) => lang.GetMessage(key, this, steamId);

        bool HasPermission(string steamId, string perm) => permission.UserHasPermission(steamId, perm);

        #endregion
    }
}
