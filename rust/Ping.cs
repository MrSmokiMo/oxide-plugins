/*
TODO:
- Fix "New configuration file created." showing every load/reload
- Re-add ping checking players using commands
- Add option to disable kick messages
- Add timed kick option?
*/

namespace Oxide.Plugins
{
    [Info("Ping", "Wulf/lukespragg", "1.0.1", ResourceId = 656)]
    [Description("Allows players to check their ping and optional high ping kicking.")]

    class Ping : RustPlugin
    {
        // Do NOT edit this file, instead edit Ping.json in server/<identity>/oxide/config

        #region Configuration Defaults

        //bool configChanged;

        protected override void LoadDefaultConfig()
        {
            Config.WriteObject(new PluginConfig
            {
                Messages = new PluginMessages
                {
                    ChatHelp = "Use '/ping' to check your ping",
                    PlayerKicked = "{0} was kicked for high ping ({1}ms)",
                    Rejected = "Your ping is too high for this server! {0}ms",
                    SelfCheck = "You have a ping of {0}ms"
                },
                Settings = new PluginSettings
                {
                    BroadcastKick = true,
                    Command = "ping",
                    PingKick = true,
                    MaxPing = 200 // Milliseconds
                }
            }, true);
            PrintWarning("New configuration file created.");
        }

        #endregion

        #region Configuration Setup

        private PluginConfig config;

        class PluginMessages
        {
            public string ChatHelp { get; set; }
            public string PlayerKicked { get; set; }
            public string Rejected { get; set; }
            public string SelfCheck { get; set; }
        }

        class PluginSettings
        {
            public string Command { get; set; }
            public bool PingKick { get; set; }
            public bool BroadcastKick { get; set; }
            public int MaxPing { get; set; }
        }

        class PluginConfig
        {
            public PluginMessages Messages { get; set; }
            public PluginSettings Settings { get; set; }
        }

        void LoadConfigValues()
        {
            config = Config.ReadObject<PluginConfig>();

            //if (!configChanged) return;
            PrintWarning("Configuration file updated.");
            Config.WriteObject(config);
        }

        #endregion

        void Loaded()
        {
            LoadConfigValues();

            permission.RegisterPermission("ping.bypass", this);

            cmd.AddChatCommand(config.Settings.Command, this, ChatPing);
            cmd.AddConsoleCommand("global." + config.Settings.Command, this, ConsolePing);
        }

        static int GetPing(Network.Connection connection) => Network.Net.sv.GetAveragePing(connection);

        object CanClientLogin(Network.Connection connection)
        {
            if (connection == null) return false;
            if (!config.Settings.PingKick) return true;
            if (permission.UserHasPermission(connection.userid.ToString(), "ping.bypass")) return true;

            var ping = GetPing(connection);
            return ping > config.Settings.MaxPing ? string.Format(config.Messages.Rejected, ping) : null;
        }

        #region Commands

        void ChatPing(BasePlayer player, string command, string[] args)
        {
            if (player == null) return;

            SendReply(player, string.Format(config.Messages.SelfCheck, GetPing(player.net.connection)));
        }

        bool ConsolePing(ConsoleSystem.Arg arg)
        {
            if (arg?.connection == null) return false;

            SendReply(arg, string.Format(config.Messages.SelfCheck, GetPing(arg.connection)));
            return true;
        }

        #endregion

        void SendHelpText(BasePlayer player) => SendReply(player, config.Messages.ChatHelp);
    }
}
