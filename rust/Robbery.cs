using System;
using Oxide.Core.Plugins;

namespace Oxide.Plugins
{
    [Info("Robbery", "Wulf/lukespragg", "2.2.0", ResourceId = 736)]
    [Description("Players can steal Economics money from other players.")]

    class Robbery : RustPlugin
    {
        // Do NOT edit this file, instead edit Robbery.json in server/<identity>/oxide/config

        #region Configuration

        // Messages
        string MoneyStolen => GetConfig("MoneyStolen", "You stole ${amount} from {player}!");

        // Settings
        float AmountAwake => GetConfig("AmountAwake", 100f);
        float AmountSleeping => GetConfig("AmountSleeping", 50f);

        protected override void LoadDefaultConfig()
        {
            // Messages
            Config["MoneyStolen"] = MoneyStolen;

            // Settings
            Config["AmountAwake"] = AmountAwake;
            Config["AmountSleeping"] = AmountSleeping;

            SaveConfig();
        }

        #endregion

        #region General Setup

        [PluginReference] Plugin Economics;
        [PluginReference] Plugin EventManager;
        [PluginReference] Plugin ZoneManager;

        void Loaded()
        {
            LoadDefaultConfig();

            permission.RegisterPermission("robbery.allowed", this);

            if (!Economics) PrintWarning("Economics is not loaded, plugin disabled! Get Economics at http://oxidemod.org/plugins/717/");
        }

        #endregion

        #region Steal Money

        void OnEntityDeath(BaseEntity entity, HitInfo info)
        {
            if (!Economics) return;

            var victim = entity as BasePlayer;
            var attacker = info?.Initiator as BasePlayer;

            // Check for for valid players
            if (victim == null || attacker == null) return;
            if (info.damageTypes.GetMajorityDamageType().ToString() == "Suicide") return;

            // Check if player is in event/zone with no looting
            var inEvent = EventManager?.Call("isPlaying", victim);
            if (inEvent != null && (bool)inEvent) return;
            var noLoot = ZoneManager?.Call("HasPlayerFlag", victim, 1 << 16);
            if (noLoot != null && (bool)noLoot) return;

            // Calculate and transfer money
            var wallet = (double)Economics.Call("GetPlayerMoney", victim.userID);
            var amount = victim.IsSleeping() ? Math.Floor(wallet * (AmountSleeping / 100)) : Math.Floor(wallet * (AmountAwake / 100));
            Economics.Call("Transfer", victim.userID, attacker.userID, amount);

            PrintToChat(attacker, MoneyStolen.Replace("{amount}", amount.ToString()).Replace("{player}", victim.displayName));
        }

        #endregion

        #region Helper Methods

        T GetConfig<T>(string name, T defaultValue)
        {
            if (Config[name] == null) return defaultValue;
            return (T)Convert.ChangeType(Config[name], typeof(T));
        }

        bool HasPermission(BasePlayer player, string perm) => permission.UserHasPermission(player.UserIDString, perm);

        #endregion
    }
}
