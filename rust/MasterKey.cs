/*
TODO:
- Add support for OnCupboardAuthorize(BuildingPrivlidge cupboard, BasePlayer player)
- Finish config generation and updating
*/

using System;using System.Collections.Generic;

using Oxide.Core;

namespace Oxide.Plugins
{
    [Info("MasterKey", "Wulf/lukespragg", "0.3.0", ResourceId = 1151)]
    [Description("Gain access to any locked object with permissions.")]

    class MasterKey : RustPlugin
    {
        // Do NOT edit this file, instead edit MasterKey.json in server\<identity>\oxide\config

        string UnlockedBox => Config.Get<string>("UnlockedBox");
        string UnlockedCupboard => Config.Get<string>("UnlockedCupboard");
        string UnlockedDoor => Config.Get<string>("UnlockedDoor");
        string UnlockedFurnace => Config.Get<string>("UnlockedFurnace");
        string UnlockedGate => Config.Get<string>("UnlockedGate");
        string UnlockedStash => Config.Get<string>("UnlockedStash");
        string MasterKeyUsed => Config.Get<string>("MasterKeyUsed");
        bool LogUsage => Config.Get<bool>("LogUsage");
        bool ShowMessages => Config.Get<bool>("ShowMessages");

        #region Configuration Defaults

        protected override void LoadDefaultConfig()
        {
            // TODO: Automatic updating
            // TODO: Nested config

            Config["Messages"] = new Dictionary<string, string>
            {
                { "MasterKeyUsed", "{player} ({steamid}) used master key at {position}" },
                { "UnlockedBox", "<size=20>Unlocked box with master key!</size>" },
                { "UnlockedCupboard", "<size=20>Unlocked cupboard with master key!</size>" },
                { "UnlockedDoor", "<size=20>Unlocked door with master key!</size>" },
                { "UnlockedFurnace", "<size=20>Unlocked furnace with master key!</size>" },
                { "UnlockedGate", "<size=20>Unlocked gate with master key!</size>" },
                { "UnlockedStash", "<size=20>Unlocked stash with master key!</size>" },
            };

            Config["Settings"] = new Dictionary<string, bool>
            {
                { "LogUsage", true },
                { "ShowMessages", true }
            };

            SaveConfig();        }

        #endregion
        #region Initialization

        void Loaded()
        {
            LoadDefaultConfig();

            permission.RegisterPermission("masterkey.all", this);
            permission.RegisterPermission("masterkey.cupboards", this);
            permission.RegisterPermission("masterkey.boxes", this);
            permission.RegisterPermission("masterkey.doors", this);
            permission.RegisterPermission("masterkey.furances", this);
            permission.RegisterPermission("masterkey.gates", this);
            permission.RegisterPermission("masterkey.stashes", this);
        }

        #endregion
        #region Lock Access

        object CanUseDoor(BasePlayer player, BaseLock door)
        {
            var parent = door.parentEntity.Get(true);
            var prefab = parent.LookupPrefabName();

            if (!door.IsLocked()) return true;

            if (prefab.Contains("woodbox_deployed"))
            {
                if (!HasPermission(player, "masterkey.all") || !HasPermission(player, "masterkey.boxes")) return null;
                if (ShowMessages) PrintToChat(player, UnlockedBox);
                if (LogUsage) LogToFile(player, MasterKeyUsed);
                return true;
            }

            if (prefab.Contains("door.hinged"))
            {
                if (!HasPermission(player, "masterkey.all") || !HasPermission(player, "masterkey.doors")) return null;
                if (!parent.IsOpen()) return null;
                if (ShowMessages) PrintToChat(player, UnlockedDoor);
                if (LogUsage) LogToFile(player, MasterKeyUsed);
                return true;
            }

            if (prefab.Contains("furnace_deployed"))
            {
                if (!HasPermission(player, "masterkey.all") || !HasPermission(player, "masterkey.furnaces")) return null;
                if (ShowMessages) PrintToChat(player, UnlockedFurnace);
                if (LogUsage) LogToFile(player, MasterKeyUsed);
                return true;
            }

            if (prefab.Contains("gates.external"))
            {
                if (!HasPermission(player, "masterkey.all") || !HasPermission(player, "masterkey.gates")) return null;
                if (!parent.IsOpen()) return null;
                if (ShowMessages) PrintToChat(player, UnlockedGate);
                if (LogUsage) LogToFile(player, MasterKeyUsed);
                return true;
            }

            if (prefab.Contains("stash_deployed"))
            {
                if (!HasPermission(player, "masterkey.all") || !HasPermission(player, "masterkey.stashes")) return null;
                if (ShowMessages) PrintToChat(player, UnlockedStash);
                if (LogUsage) LogToFile(player, MasterKeyUsed);
                return true;
            }

            return null;
        }

        #endregion
        #region Cupboard Access

        void OnEntityEnter(TriggerBase trigger, BaseEntity entity)
        {
            if (!entity.ToPlayer() || !(trigger is BuildPrivilegeTrigger)) return;

            var player = entity.ToPlayer();

            if (!HasPermission(player, "masterkey.all") && !HasPermission(player, "masterkey.cupboards")) return;
            timer.Once(0.1f, () => player.SetPlayerFlag(BasePlayer.PlayerFlags.HasBuildingPrivilege, true));
            if (ShowMessages) PrintToChat(player, UnlockedCupboard);
            if (LogUsage) LogToFile(player, UnlockedCupboard);
        }

        #endregion
        #region Helper Methods

        static void LogToFile(BasePlayer player, string message)
        {
            var dateTime = DateTime.Now.ToString("M-d-yyyy");
            var position = $"{player.transform.position.x}, {player.transform.position.y}, {player.transform.position.z}";
            message = message.Replace("{player}", player.displayName).Replace("{steamid}", player.UserIDString).Replace("{position}", position);
            ConVar.Server.Log(Interface.Oxide.LogDirectory + $"masterkeys_{dateTime}.txt", message);
        }

        bool HasPermission(BasePlayer player, string perm) => permission.UserHasPermission(player.UserIDString, perm);

        #endregion
    }
}
