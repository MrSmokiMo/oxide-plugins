using System;

namespace Oxide.Plugins
{
    [Info("NoSleepers", "Wulf/lukespragg", "0.3.0", ResourceId = 1452)]
    [Description("Disables sleepers by killing players on quit.")]

    class NoSleepers : RustPlugin
    {
        // Do NOT edit this file, instead edit NoSleepers.json in server/<identity>/oxide/config

        #region Configuration

        bool AdminCanSleep => GetConfig("AdminCanSleep", true);
        bool KillExisting => GetConfig("KillExisting", true);
        bool RemoveCorpses => GetConfig("RemoveCorpses", false);

        protected override void LoadDefaultConfig()
        {
            Config["AdminCanSleep"] = AdminCanSleep;
            Config["KillExisting"] = KillExisting;
            Config["RemoveCorpses"] = RemoveCorpses;
            SaveConfig();
        }

        #endregion

        #region General Setup

        void Loaded() => LoadDefaultConfig();

        void OnServerInitialized()
        {
            var sleepers = BasePlayer.sleepingPlayerList;
            if (sleepers.Count > 0) Puts($"Killed {sleepers.Count} sleepers");
            foreach (var sleeper in sleepers.ToArray()) if (!sleeper.IsAdmin()) sleeper.KillMessage();
        }

        #endregion

        #region Sleeper/Corpse Removal

        void OnPlayerDisconnected(BasePlayer player)
        {
            if (!IsAdmin(player)) player.Die();
        }

        void OnRunCommand(ConsoleSystem.Arg arg)
        {
            if (arg?.connection == null || arg.cmd.namefull != "global.sleep") return;
            var player = arg.connection.player as BasePlayer;
            if (player != null && !IsAdmin(player)) player.Die();
        }

        void OnEntitySpawned(BaseNetworkable entity)
        {
            if (RemoveCorpses && entity.name.EndsWith("player_corpse.prefab")) entity.KillMessage();
        }

        void OnPlayerRespawned(BasePlayer player) => player.EndSleeping();

        #endregion

        #region Helper Methods

        T GetConfig<T>(string name, T defaultValue)
        {
            if (Config[name] == null) return defaultValue;
            return (T)Convert.ChangeType(Config[name], typeof(T));
        }

        bool IsAdmin(BasePlayer player) => (permission.UserHasGroup(player.UserIDString, "admin") || player.net.connection.authLevel > 0);

        #endregion
    }
}
